@using BlazorFocused
@using BlazorMusic.Client.Actions
@using BlazorMusic.Client.Models
@using BlazorMusic.Shared
@using Microsoft.Extensions.Options

@inject IStore<ArtistStore> store
@inject IOptions<ApiOptions> apiOptions

@if (artistReleases is not null)
{
    <div class="accordion accordion-flush" id="artistReleases">
        @foreach(var release in artistReleases)
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-@release.Id">
                    <button class="accordion-button @(IsCurrent(release.Id) ? string.Empty : "collapsed")" type="button" @onclick="@(() => Toggle(release.Id))" data-bs-toggle="collapse" data-bs-target="#collapse-@release.Id" aria-expanded="@(IsCurrent(release.Id) ? "true" : "false")" aria-controls="collapse-@release.Id">
                        @release.Title (@release.TrackCount Tracks @release.MediaType @release.Format) @release.Country
                    </button>
                </h2>
                <div id="collapse-@release.Id" class="accordion-collapse collapse @(IsCurrent(release.Id) ? "show" : string.Empty)" aria-labelledby="heading-@release.Id" data-bs-parent="#artistReleases">
                    @if (release.Tracks.Any())
                    {
                        <div class="accordion-body">
                            <table cellpadding="5">
                                <thead>
                                    <tr>
                                        <th>Track</th>
                                        <th>Duration (minutes)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var track in release.Tracks)
                                    {
                                        <tr><td>@track.Title</td><td>@(MusicDuration(track.Duration))</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="tracks-loading track">
                            <strong>Loading Tracks...</strong>
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    if (releaseError)
    {
        <h5>An error occurred. No releases present at this time.</h5>
    }
    else
    {
        <div class="tracks-loading release">
            <strong class="text-primary">Loading Releases...</strong>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
}


@code {
    private string currentToggleId = string.Empty;
    private bool releaseError = false;

    IEnumerable<ArtistRelease> artistReleases;

    protected override void OnInitialized()
    {
        store.Subscribe(store =>
        {
            artistReleases = store.Releases;
            releaseError = store.ReleaseError;

            StateHasChanged();
        });
    }

    protected async Task Toggle(string id)
    {
        currentToggleId = currentToggleId == id ? string.Empty : id;

        // This action will trigger a state change
        await store.DispatchAsync<AttachTracksAction, string>(id);
    }

    protected bool IsCurrent(string id) => currentToggleId == id;

    protected string MusicDuration(long seconds)
    {
        var timespan = TimeSpan.FromMilliseconds(seconds);
        var timeSpanSeconds = timespan.Seconds;
        var secondsDisplay = timeSpanSeconds < 10 ? $"0{timeSpanSeconds}" : timeSpanSeconds.ToString();

        return $"{timespan.Minutes}:{secondsDisplay}";
    }
}
